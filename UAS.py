# -*- coding: utf-8 -*-
"""TUBES FIX UTS DATA SAINS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fMFjnyiwTVZvxDertxwvXne159MrMg3L
"""

from google.colab import drive
drive.mount('/content/drive')

"""**TUBES DATA SAINS**

**DATASET: CANCER PREDICTION**

https://www.kaggle.com/datasets/rabieelkharoua/cancer-prediction-dataset

**Anggota Kelompok:**

**Irawan Mardiansyah (1103210174)**

**Nella Aprilia (1103210185)**

Kumpulan dataset ini berisi informasi medis dan gaya hidup untuk 1500 pasien, yang dirancang untuk memprediksi keberadaan kanker berdasarkan berbagai fitur-fitur seperti:

1. Age : Nilai integer yang mewakili usia pasien, berkisar antara 20 hingga 80.

2. Gender :

 0 menunjukkan Pria

 1 menunjukkan Wanita.

3. BMI : Nilai berkelanjutan yang mewakili Indeks Massa Tubuh, berkisar antara 15 hingga 40.

4. Merokok :

 0:Tidak

 1: Ya

5. GeneticRisk : kategoris yang mewakili tingkat risiko genetik untuk kanker dengan

 0: Rendah

 1: Sedang

 2: Tinggi

6. PhysicalActivity : yang mewakili jumlah jam per minggu yang dihabiskan untuk aktivitas fisik.

7. AlcoholIntake : menunjukkan apakah pasien memiliki riwayat kanker pribadi di mana

 0: Tidak

 1: Ya

8. CancerHistory : Nilai biner yang menunjukkan apakah pasien memiliki riwayat kanker pribadi, di mana

 0: Tidak

 1: Ya

9. Diagnosis : Nilai biner yang menunjukkan status diagnosis kanker, di mana

 0: menunjukkan Tidak Ada Kanker

 1:  menunjukkan Kanker.

Kumpulan data dataset Cancer Prediction ini memprediksikan seseorang kemungkinan terkena cancer berdasarkan sejumlah faktor risiko, baik dari segi perilaku (seperti smoking dan alcoholintake), kondisi fisik (age, BMI), maupun risiko geneticrisk.

**Menghubungkan Google Colab dengan Google Drive**
"""

try:
    from google.colab import drive
    drive.mount('/content/drive')
except ImportError:
    print("Tidak di Google Colab. Akses Google Drive tidak tersedia.")

"""**1. Library**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('/content/drive/MyDrive/Data Sains/The_Cancer_data_1500_V2.csv')

print("Preview Data:")
df.head(10)

df.sample(10)

df.info()

df.describe()

# Menghitung matriks korelasi untuk kolom numerik seperti 'Age', 'BMI', 'PhysicalActivity', dll
correlation_matrix = df.select_dtypes(include=['int64', 'float64']).corr()

# Membuat heatmap dari matriks korelasi
plt.figure(figsize=(12, 8))  # Menentukan ukuran figure
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='viridis', square=True)

# Menambahkan judul untuk heatmap
plt.title('Matriks Korelasi antara Variabel pada Dataset Cancer Prediction')

# Menampilkan heatmap
plt.show()

# Menampilkan daftar kolom pada dataset
print("Daftar Kolom pada Dataset Cancer Prediction:", df.columns)

# Memisahkan kolom numerik integer dan float
df_numerik = df.select_dtypes(include=['int64', 'float64'])

# Memisahkan kolom kategorikal object dan integer biner
df_kategorikal = df.select_dtypes(include=['object']).copy()

# Memeriksa fitur biner yang mungkin termasuk kategorikal
for col in df.select_dtypes(include=['int64']):
    if df[col].nunique() <= 3:
        df_kategorikal[col] = df[col]

# Menghapus kolom yang dianggap kategorikal dari data numerik
df_numerik = df_numerik.drop(columns=df_kategorikal.columns, errors='ignore')

# Menampilkan hasil
print("\nData Kategorikal dari Dataset Cancer Prediction:")
print(df_kategorikal.head())

print("\nData Numerik dari Dataset Cancer Prediction:")
print(df_numerik.head())

# Kolom-kolom yang akan divisualisasikan menggunakan pie chart
columns_to_visualize = ['Gender', 'Smoking', 'GeneticRisk', 'CancerHistory', 'Diagnosis']

# Membuat pie chart untuk setiap kolom yang sudah ditentukan
for column in columns_to_visualize:
    # Mengecek kolom dalam dataset
    if column in df.columns:
        # Dgunakan untuk membedakan kolom numerik dari kolom non-numerik
        if df[column].dtype in ['int64', 'float64']:
            # Pada kolom Age memnbagi menjadi kategori rentang usia
            if column == 'Age':
                bins = [0, 20, 40, 60, 80, 100]  # Rentang usia
                labels = ['0-20', '21-40', '41-60', '61-80', '81-100']
                df[column] = pd.cut(df[column], bins=bins, labels=labels, right=False)

            # Pada kolom BMI, dikategori berdasarkan rentang BMI
            elif column == 'BMI':
                bins = [0, 18.5, 24.9, 29.9, 40]  # Rentang BMI
                labels = ['Underweight', 'Normal', 'Overweight', 'Obese']
                df[column] = pd.cut(df[column], bins=bins, labels=labels, right=False)

        # Menghitung frekuensi setiap nilai pada kolom
        counts = df[column].value_counts()

        # Membuat pie chart
        plt.figure(figsize=(8, 6))
        plt.pie(counts, labels=counts.index, autopct='%1.1f%%', startangle=140)
        plt.title(f'Pie Chart for {column}')
        plt.axis('equal')  # Agar pie chart berbentuk lingkaran
        plt.show()

# Menggunakan loop untuk memproses setiap kolom kategorikal dalam dataframe
for column in df_kategorikal.columns:

    # Menghitung frekuensi kemunculan setiap nilai dalam kolom
    counts = df[column].value_counts()

    # Membuat gambar baru untuk setiap kolom
    plt.figure(figsize=(10, 6))

    # Membuat bar chart
    counts.plot(kind='bar')

    # Menambahkan judul pada grafik
    plt.title(f'Bar Chart {column}')  # Judul grafik mencakup nama kolom

    # Menambahkan label sumbu x
    plt.xlabel(column)

    # Menambahkan label sumbu y
    plt.ylabel('Count')

    # Rotasi label pada sumbu X agar mudah dibaca
    plt.xticks(rotation=45)

    # Menampilkan grafik yang sudah dibuat
    plt.show()  # Menampilkan bar chart di layar

# Menentukan palet warna dari seaborn
colors = sns.color_palette("Set2", len(df_numerik.columns))

# Loop untuk setiap kolom numerik dalam dataframe
for i, column in enumerate(df_numerik.columns):
    plt.figure(figsize=(20, 6))  # Menentukan ukuran gambar

    # Membuat plot dengan warna
    plt.plot(df[column], label=column, color=colors[i], linewidth=2)

    # Menambahkan judul, label sumbu, dan grid
    plt.title(f'Line Graph {column}', fontsize=16, fontweight='bold')
    plt.xlabel('Index', fontsize=12)
    plt.ylabel(column, fontsize=12)

    # Menampilkan grid
    plt.grid(True, linestyle='--', color='grey', alpha=0.7)  # Grid dengan garis putus-putus dan transparansi

    # Menambahkan legenda
    plt.legend()

    # Menampilkan plot
    plt.show()

# Loop untuk setiap kolom numerik dalam dataframe
for column in df_numerik.columns:
    # Membuat figure baru dengan ukuran 8x6
    plt.figure(figsize=(8, 6))

    # Membuat histogram untuk setiap kolom
    plt.hist(df[column], bins=30, color='orange', edgecolor='blue')

    # Menambahkan judul histogram
    plt.title(f'Histogram {column}')

    # Menambahkan label pada sumbu x
    plt.xlabel(f'{column}')

    # Menambahkan label pada sumbu y dengan 'Frekuensi'
    plt.ylabel('Frekuensi')

    # Menampilkan plot (histogram)
    plt.show()

# Loop untuk setiap kolom numerik dalam dataframe
for column in df_numerik.columns:
    plt.figure(figsize=(8,6))

    # Membuat boxplot untuk kolom numerik terhadap Diagnosis dengan palet warna 'Set2'
    sns.boxplot(x='Diagnosis', y=column, data=df, palette='Set2')

    # Menambahkan judul
    plt.title(f'Boxplot {column} terhadap Diagnosis', fontsize=14)

    # Menampilkan plot
    plt.show()

# Mengatur ukuran figure untuk plot yang lebih besar
plt.figure(figsize=(15, 10))

# Scatter Plot 1: Age vs GeneticRisk
plt.subplot(2, 2, 1)
sns.scatterplot(x='Age', y='GeneticRisk', hue='Diagnosis', data=df, palette='viridis', s=100, edgecolor='red')
plt.title('Age vs GeneticRisk berdasarkan Diagnosis', fontsize=14)
plt.xlabel('Age (Umur)', fontsize=12)
plt.ylabel('GeneticRisk (Risiko Genetik)', fontsize=12)
plt.grid(True)

# Scatter Plot 2: BMI vs CancerHistory
plt.subplot(2, 2, 2)
sns.scatterplot(x='BMI', y='CancerHistory', hue='Diagnosis', data=df, palette='magma', s=100, edgecolor='green')
plt.title('BMI vs CancerHistory berdasarkan Diagnosis', fontsize=14)
plt.xlabel('BMI (Indeks Massa Tubuh)', fontsize=12)
plt.ylabel('CancerHistory (Riwayat Kanker)', fontsize=12)
plt.grid(True)

# Scatter Plot 3: PhysicalActivity vs BMI
plt.subplot(2, 2, 3)
sns.scatterplot(x='PhysicalActivity', y='BMI', hue='Diagnosis', data=df, palette='plasma', s=100, edgecolor='orange')
plt.title('PhysicalActivity vs BMI berdasarkan Diagnosis', fontsize=14)
plt.xlabel('PhysicalActivity (Aktivitas Fisik)', fontsize=12)
plt.ylabel('BMI (Indeks Massa Tubuh)', fontsize=12)
plt.grid(True)

# Scatter Plot 4: Age vs Smoking
plt.subplot(2, 2, 4)
sns.scatterplot(x='Age', y='Smoking', hue='Diagnosis', data=df, palette='coolwarm', s=100, edgecolor='blue')
plt.title('Age vs Smoking berdasarkan Diagnosis', fontsize=14)
plt.xlabel('Age (Umur)', fontsize=12)
plt.ylabel('Smoking (Merokok)', fontsize=12)
plt.grid(True)

# Menyesuaikan tampilan layout
plt.tight_layout()

# Menampilkan plot
plt.show()

# Daftar kolom kategorikal yang akan diencode
categorical_columns = ['Gender', 'Smoking', 'GeneticRisk', 'CancerHistory', 'Diagnosis']

# Membuat instance dari LabelEncoder
label_encoder = LabelEncoder()

# Melakukan encoding untuk setiap kolom kategorikal
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

# Menampilkan informasi dataset setelah encoding
print("\nInformasi dataset setelah encoding:")
print(df.info())

# Menampilkan jumlah kategori pada kolom 'Gender' setelah encoding
print("\nJumlah kategori pada kolom 'Gender':")
print(df['Gender'].value_counts())

# Menghapus baris yang memiliki nilai '2' pada kolom 'Gender'
df = df[df['Gender'] != 2]

# Menampilkan jumlah kategori pada kolom 'Gender'
print(df['Gender'].value_counts())

# Mengecek missing values untuk mengetahui kolom mana yang memiliki nilai yang hilang
missing_values = df.isnull().sum()
print("Missing values before handling:")
print(missing_values)

# Mengisi missing values pada kolom numerik dengan rata-rata
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns  # Mengambil kolom numerik

for column in numerical_columns:
    df[column] = df[column].fillna(df[column].mean())  # Mengisi missing values dengan rata-rata

# Cek missing values setelah diselesaikan
missing_values_after = df.isnull().sum()
print("\nMissing values after handling:")
print(missing_values_after)

# Menyimpan dataset yang sudah diisi missing values
df.to_csv('/content/drive/MyDrive/Data Sains/The_Cancer_data_1500_V2.csv', index=False)

# Menampilkan informasi dataframe setelah missing values diselesaikan
df.describe()

X = df.drop(columns=['Diagnosis'])  # Diagnosis kolom target
y = df['Diagnosis']  # Kolom target Diagnosis

# Fitur terbaik menggunakan SelectKBest dengan skor Chi-Squared
select_feature = SelectKBest(score_func=chi2, k='all')

# Fit SelectKBest pada data
fit = select_feature.fit(X, y)

# Membuat DataFrame untuk skor fitur
dfscore = pd.DataFrame(fit.scores_)

# Membuat DataFrame untuk kolom fitur
dfcolumns = pd.DataFrame(X.columns)

# Menggabungkan skor dan kolom fitur
featureScore = pd.concat([dfcolumns, dfscore], axis=1)

# Memberi nama kolom pada DataFrame featureScore
featureScore.columns = ['Columns', 'Score']

# Menampilkan fitur yang dipilih berdasarkan skor tertinggi
print(featureScore.sort_values(by='Score', ascending=False))

# Membuat model ExtraTreesClassifier
model = ExtraTreesClassifier()

# Melatih model dengan data (X sebagai fitur, y sebagai target)
model.fit(X, y)

# Menampilkan nilai feature importances
print(model.feature_importances_)

# Membuat Series dari feature importances dengan nama fitur sebagai index
feat_importance = pd.Series(model.feature_importances_, index=X.columns)

# Menampilkan 8 fitur terpenting dengan menggunakan plot horizontal
feat_importance.nlargest(8).plot(kind='barh', color='pink', edgecolor='black')

# 6. Menampilkan grafik
plt.title('Top 8 Fitur Terpenting', fontsize=14, fontweight='bold')  # Menambahkan judul
plt.xlabel('Feature Importance', fontsize=12)  # Menambahkan label pada sumbu X
plt.ylabel('Fitur', fontsize=12)  # Menambahkan label pada sumbu Y
plt.show()  # Menampilkan grafik

print("Hasil Akhir:")
df.head(20)

print("Hasil Akhir:")
df.tail(20)

print("Hasil Akhir:")
df.sample(20)

"""# **UAS**"""

!pip install streamlit
!pip install pyngrok

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import streamlit as st

# Load dataset
st.write("### Load Dataset")
@st.cache
def load_data():
    data = pd.read_csv('/content/drive/MyDrive/Data Sains/The_Cancer_data_1500_V2.csv')  # Dataset cancer prediction
    return data

data = load_data()
st.write(data.head())

# Preprocessing data
st.write("### Data Preprocessing")

# Feature and target selection
st.write("#### Selecting Features and Target")
features = data.drop(columns=['Diagnosis'])  # Assuming 'diagnosis' is the target column
target = data['Diagnosis']
st.write("Features:", features.columns.tolist())
st.write("Target:", 'Diagnosis')

# Train-test split
st.write("#### Splitting Data")
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
st.write(f"Training data size: {X_train.shape[0]} rows")
st.write(f"Test data size: {X_test.shape[0]} rows")

# Model training
st.write("### Train Model")
clf = RandomForestClassifier(random_state=42)
st.write("Training the model...")
clf.fit(X_train, y_train)
st.write("Model training complete!")

# Model evaluation
st.write("### Model Evaluation")
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
st.write(f"Accuracy: {accuracy:.2f}")
st.write("Classification Report:")
st.text(classification_report(y_test, y_pred))

# Interactive prediction
st.write("### Make Predictions")
def user_input_features():
    input_data = {}
    for feature in features.columns:
        input_data[feature] = st.number_input(f"{feature}", value=0.0)
    return pd.DataFrame([input_data])

input_df = user_input_features()
st.write("Input Data:", input_df)

if st.button('Predict Diagnosis'):
    prediction = clf.predict(input_df)[0]
    st.write(f"Predicted Diagnosis: {prediction}")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# st.title('Cancer Prediction')
# st.write('This is a simple app to predict cancer diagnosis.')